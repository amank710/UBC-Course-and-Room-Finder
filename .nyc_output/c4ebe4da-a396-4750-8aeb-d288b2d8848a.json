{"C:\\Users\\vande\\source\\repos\\University\\CPSC 310\\project_team131\\src\\controller\\IInsightFacade.ts":{"path":"C:\\Users\\vande\\source\\repos\\University\\CPSC 310\\project_team131\\src\\controller\\IInsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":113}},"2":{"start":{"line":5,"column":0},"end":{"line":8,"column":89}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":48}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":42}},"5":{"start":{"line":11,"column":8},"end":{"line":11,"column":23}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":52}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":36}},"8":{"start":{"line":18,"column":8},"end":{"line":18,"column":23}},"9":{"start":{"line":19,"column":8},"end":{"line":19,"column":53}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":38}},"11":{"start":{"line":25,"column":8},"end":{"line":25,"column":23}},"12":{"start":{"line":26,"column":8},"end":{"line":26,"column":59}},"13":{"start":{"line":29,"column":0},"end":{"line":29,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":1},"end":{"line":5,"column":2}},"loc":{"start":{"line":5,"column":31},"end":{"line":8,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":25},"end":{"line":13,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":25},"end":{"line":20,"column":5}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":25},"end":{"line":27,"column":5}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":24},"end":{"line":8,"column":87}},"type":"binary-expr","locations":[{"start":{"line":8,"column":24},"end":{"line":8,"column":50}},{"start":{"line":8,"column":55},"end":{"line":8,"column":86}}],"line":8}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":30,"6":30,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":1},"f":{"0":1,"1":30,"2":1,"3":0},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"C:/Users/vande/source/repos/University/CPSC 310/project_team131/src/controller/IInsightFacade.ts","sources":["C:/Users/vande/source/repos/University/CPSC 310/project_team131/src/controller/IInsightFacade.ts"],"names":[],"mappings":";;;AAMA,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC7B,2CAAqB,CAAA;IACrB,qCAAe,CAAA;AAChB,CAAC,EAHW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAG7B;AAYD,MAAa,YAAa,SAAQ,KAAK;IACtC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAC7C,CAAC;CACD;AALD,oCAKC;AAED,MAAa,aAAc,SAAQ,KAAK;IACvC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAC9C,CAAC;CACD;AALD,sCAKC;AAED,MAAa,mBAAoB,SAAQ,KAAK;IAC7C,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;IACpD,CAAC;CACD;AALD,kDAKC","sourcesContent":["/*\n * This is the primary high-level API for the project. In this folder there should be:\n * A class called InsightFacade, this should be in a file called InsightFacade.ts.\n * You should not change this interface at all or the test suite will not work.\n */\n\nexport enum InsightDatasetKind {\n\tSections = \"sections\",\n\tRooms = \"rooms\",\n}\n\nexport interface InsightDataset {\n\tid: string;\n\tkind: InsightDatasetKind;\n\tnumRows: number;\n}\n\nexport interface InsightResult {\n\t[key: string]: string | number;\n}\n\nexport class InsightError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, InsightError);\n\t}\n}\n\nexport class NotFoundError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, NotFoundError);\n\t}\n}\n\nexport class ResultTooLargeError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, ResultTooLargeError);\n\t}\n}\n\nexport interface IInsightFacade {\n\t/**\n\t * Add a dataset to insightUBC.\n\t *\n\t * @param id  The id of the dataset being added. Follows the format /^[^_]+$/\n\t * @param content  The base64 content of the dataset. This content should be in the form of a serialized zip file.\n\t * @param kind  The kind of the dataset\n\t *\n\t * @return Promise <string[]>\n\t *\n\t * The promise should fulfill on a successful add, reject for any failures.\n\t * The promise should fulfill with a string array,\n\t * containing the ids of all currently added datasets upon a successful add.\n\t * The promise should reject with an InsightError describing the error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t * If id is the same as the id of an already added dataset, the dataset should be rejected and not saved.\n\t *\n\t * After receiving the dataset, it should be processed into a data structure of\n\t * your design. The processed data structure should be persisted to disk; your\n\t * system should be able to load this persisted value into memory for answering\n\t * queries.\n\t *\n\t * Ultimately, a dataset must be added or loaded from disk before queries can\n\t * be successfully answered.\n\t */\n\taddDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]>;\n\n\t/**\n\t * Remove a dataset from insightUBC.\n\t *\n\t * @param id  The id of the dataset to remove. Follows the format /^[^_]+$/\n\t *\n\t * @return Promise <string>\n\t *\n\t * The promise should fulfill upon a successful removal, reject on any error.\n\t * Attempting to remove a dataset that hasn't been added yet counts as an error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t *\n\t * The promise should fulfill the id of the dataset that was removed.\n\t * The promise should reject with a NotFoundError (if a valid id was not yet added)\n\t * or an InsightError (invalid id or any other source of failure) describing the error.\n\t *\n\t * This will delete both disk and memory caches for the dataset for the id meaning\n\t * that subsequent queries for that id should fail unless a new addDataset happens first.\n\t */\n\tremoveDataset(id: string): Promise<string>;\n\n\t/**\n\t * Perform a query on insightUBC.\n\t *\n\t * @param query  The query to be performed.\n\t *\n\t * If a query is incorrectly formatted, references a dataset not added (in memory or on disk),\n\t * or references multiple datasets, it should be rejected.\n\t *\n\t * @return Promise <InsightResult[]>\n\t *\n\t * The promise should fulfill with an array of results.\n\t * The promise should reject with a ResultTooLargeError (if the query returns too many results)\n\t * or an InsightError (for any other source of failure) describing the error.\n\t */\n\tperformQuery(query: unknown): Promise<InsightResult[]>;\n\n\t/**\n\t * List all currently added datasets, their types, and number of rows.\n\t *\n\t * @return Promise <InsightDataset[]>\n\t * The promise should fulfill an array of currently added InsightDatasets, and will only fulfill.\n\t */\n\tlistDatasets(): Promise<InsightDataset[]>;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e90ceab5c7baf10402e3d78417b650ae8f0e5852","contentHash":"b0689e45c424e1c541b639ccb1b2b9af84f07131491899df9a62cf2b8e92c5b3"},"C:\\Users\\vande\\source\\repos\\University\\CPSC 310\\project_team131\\src\\controller\\InsightFacade.ts":{"path":"C:\\Users\\vande\\source\\repos\\University\\CPSC 310\\project_team131\\src\\controller\\InsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":52}},"4":{"start":{"line":7,"column":16},"end":{"line":7,"column":49}},"5":{"start":{"line":10,"column":8},"end":{"line":10,"column":49}},"6":{"start":{"line":12,"column":15},"end":{"line":12,"column":17}},"7":{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},"8":{"start":{"line":15,"column":12},"end":{"line":15,"column":83}},"9":{"start":{"line":17,"column":8},"end":{"line":19,"column":9}},"10":{"start":{"line":17,"column":44},"end":{"line":17,"column":61}},"11":{"start":{"line":18,"column":12},"end":{"line":18,"column":98}},"12":{"start":{"line":21,"column":8},"end":{"line":29,"column":9}},"13":{"start":{"line":22,"column":12},"end":{"line":22,"column":66}},"14":{"start":{"line":23,"column":12},"end":{"line":25,"column":13}},"15":{"start":{"line":24,"column":16},"end":{"line":24,"column":110}},"16":{"start":{"line":28,"column":12},"end":{"line":28,"column":107}},"17":{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},"18":{"start":{"line":31,"column":12},"end":{"line":31,"column":96}},"19":{"start":{"line":33,"column":22},"end":{"line":33,"column":23}},"20":{"start":{"line":34,"column":8},"end":{"line":36,"column":9}},"21":{"start":{"line":35,"column":12},"end":{"line":35,"column":66}},"22":{"start":{"line":37,"column":27},"end":{"line":41,"column":9}},"23":{"start":{"line":42,"column":8},"end":{"line":42,"column":39}},"24":{"start":{"line":43,"column":8},"end":{"line":43,"column":75}},"25":{"start":{"line":43,"column":62},"end":{"line":43,"column":72}},"26":{"start":{"line":46,"column":20},"end":{"line":46,"column":41}},"27":{"start":{"line":47,"column":34},"end":{"line":47,"column":36}},"28":{"start":{"line":48,"column":8},"end":{"line":53,"column":9}},"29":{"start":{"line":49,"column":12},"end":{"line":49,"column":59}},"30":{"start":{"line":52,"column":12},"end":{"line":52,"column":91}},"31":{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},"32":{"start":{"line":55,"column":12},"end":{"line":55,"column":94}},"33":{"start":{"line":57,"column":27},"end":{"line":57,"column":32}},"34":{"start":{"line":58,"column":22},"end":{"line":58,"column":31}},"35":{"start":{"line":59,"column":32},"end":{"line":59,"column":34}},"36":{"start":{"line":60,"column":8},"end":{"line":82,"column":9}},"37":{"start":{"line":61,"column":25},"end":{"line":61,"column":40}},"38":{"start":{"line":62,"column":12},"end":{"line":64,"column":13}},"39":{"start":{"line":63,"column":16},"end":{"line":63,"column":135}},"40":{"start":{"line":65,"column":12},"end":{"line":81,"column":13}},"41":{"start":{"line":66,"column":16},"end":{"line":66,"column":36}},"42":{"start":{"line":67,"column":16},"end":{"line":80,"column":17}},"43":{"start":{"line":68,"column":36},"end":{"line":78,"column":22}},"44":{"start":{"line":69,"column":24},"end":{"line":77,"column":25}},"45":{"start":{"line":70,"column":50},"end":{"line":70,"column":69}},"46":{"start":{"line":71,"column":28},"end":{"line":73,"column":29}},"47":{"start":{"line":72,"column":32},"end":{"line":72,"column":76}},"48":{"start":{"line":76,"column":28},"end":{"line":76,"column":117}},"49":{"start":{"line":79,"column":20},"end":{"line":79,"column":50}},"50":{"start":{"line":83,"column":8},"end":{"line":83,"column":43}},"51":{"start":{"line":84,"column":8},"end":{"line":86,"column":9}},"52":{"start":{"line":85,"column":12},"end":{"line":85,"column":137}},"53":{"start":{"line":87,"column":8},"end":{"line":87,"column":33}},"54":{"start":{"line":90,"column":29},"end":{"line":90,"column":118}},"55":{"start":{"line":91,"column":30},"end":{"line":91,"column":35}},"56":{"start":{"line":92,"column":8},"end":{"line":103,"column":9}},"57":{"start":{"line":93,"column":31},"end":{"line":93,"column":59}},"58":{"start":{"line":94,"column":12},"end":{"line":99,"column":13}},"59":{"start":{"line":95,"column":16},"end":{"line":98,"column":17}},"60":{"start":{"line":95,"column":48},"end":{"line":95,"column":98}},"61":{"start":{"line":96,"column":20},"end":{"line":96,"column":43}},"62":{"start":{"line":97,"column":20},"end":{"line":97,"column":26}},"63":{"start":{"line":100,"column":12},"end":{"line":102,"column":13}},"64":{"start":{"line":101,"column":16},"end":{"line":101,"column":22}},"65":{"start":{"line":104,"column":8},"end":{"line":104,"column":31}},"66":{"start":{"line":107,"column":8},"end":{"line":109,"column":9}},"67":{"start":{"line":108,"column":12},"end":{"line":108,"column":83}},"68":{"start":{"line":110,"column":29},"end":{"line":110,"column":84}},"69":{"start":{"line":110,"column":66},"end":{"line":110,"column":83}},"70":{"start":{"line":111,"column":8},"end":{"line":117,"column":9}},"71":{"start":{"line":112,"column":12},"end":{"line":112,"column":103}},"72":{"start":{"line":115,"column":12},"end":{"line":115,"column":50}},"73":{"start":{"line":116,"column":12},"end":{"line":116,"column":39}},"74":{"start":{"line":120,"column":8},"end":{"line":120,"column":62}},"75":{"start":{"line":123,"column":8},"end":{"line":123,"column":50}},"76":{"start":{"line":126,"column":8},"end":{"line":126,"column":46}},"77":{"start":{"line":129,"column":0},"end":{"line":129,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":4},"end":{"line":9,"column":5}},"loc":{"start":{"line":9,"column":18},"end":{"line":11,"column":5}},"line":9},"2":{"name":"(anonymous_2)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":40},"end":{"line":44,"column":5}},"line":13},"3":{"name":"(anonymous_3)","decl":{"start":{"line":17,"column":31},"end":{"line":17,"column":32}},"loc":{"start":{"line":17,"column":44},"end":{"line":17,"column":61}},"line":17},"4":{"name":"(anonymous_4)","decl":{"start":{"line":43,"column":49},"end":{"line":43,"column":50}},"loc":{"start":{"line":43,"column":62},"end":{"line":43,"column":72}},"line":43},"5":{"name":"(anonymous_5)","decl":{"start":{"line":45,"column":4},"end":{"line":45,"column":5}},"loc":{"start":{"line":45,"column":34},"end":{"line":88,"column":5}},"line":45},"6":{"name":"(anonymous_6)","decl":{"start":{"line":68,"column":60},"end":{"line":68,"column":61}},"loc":{"start":{"line":68,"column":73},"end":{"line":78,"column":21}},"line":68},"7":{"name":"(anonymous_7)","decl":{"start":{"line":89,"column":4},"end":{"line":89,"column":5}},"loc":{"start":{"line":89,"column":40},"end":{"line":105,"column":5}},"line":89},"8":{"name":"(anonymous_8)","decl":{"start":{"line":95,"column":39},"end":{"line":95,"column":40}},"loc":{"start":{"line":95,"column":48},"end":{"line":95,"column":98}},"line":95},"9":{"name":"(anonymous_9)","decl":{"start":{"line":106,"column":4},"end":{"line":106,"column":5}},"loc":{"start":{"line":106,"column":22},"end":{"line":118,"column":5}},"line":106},"10":{"name":"(anonymous_10)","decl":{"start":{"line":110,"column":53},"end":{"line":110,"column":54}},"loc":{"start":{"line":110,"column":66},"end":{"line":110,"column":83}},"line":110},"11":{"name":"(anonymous_11)","decl":{"start":{"line":119,"column":4},"end":{"line":119,"column":5}},"loc":{"start":{"line":119,"column":18},"end":{"line":121,"column":5}},"line":119},"12":{"name":"(anonymous_12)","decl":{"start":{"line":122,"column":4},"end":{"line":122,"column":5}},"loc":{"start":{"line":122,"column":24},"end":{"line":124,"column":5}},"line":122},"13":{"name":"(anonymous_13)","decl":{"start":{"line":125,"column":4},"end":{"line":125,"column":5}},"loc":{"start":{"line":125,"column":19},"end":{"line":127,"column":5}},"line":125}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},"type":"if","locations":[{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},{"start":{"line":14,"column":8},"end":{"line":16,"column":9}}],"line":14},"4":{"loc":{"start":{"line":17,"column":8},"end":{"line":19,"column":9}},"type":"if","locations":[{"start":{"line":17,"column":8},"end":{"line":19,"column":9}},{"start":{"line":17,"column":8},"end":{"line":19,"column":9}}],"line":17},"5":{"loc":{"start":{"line":23,"column":12},"end":{"line":25,"column":13}},"type":"if","locations":[{"start":{"line":23,"column":12},"end":{"line":25,"column":13}},{"start":{"line":23,"column":12},"end":{"line":25,"column":13}}],"line":23},"6":{"loc":{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},"type":"if","locations":[{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},{"start":{"line":30,"column":8},"end":{"line":32,"column":9}}],"line":30},"7":{"loc":{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},"type":"if","locations":[{"start":{"line":54,"column":8},"end":{"line":56,"column":9}},{"start":{"line":54,"column":8},"end":{"line":56,"column":9}}],"line":54},"8":{"loc":{"start":{"line":62,"column":12},"end":{"line":64,"column":13}},"type":"if","locations":[{"start":{"line":62,"column":12},"end":{"line":64,"column":13}},{"start":{"line":62,"column":12},"end":{"line":64,"column":13}}],"line":62},"9":{"loc":{"start":{"line":62,"column":16},"end":{"line":62,"column":65}},"type":"binary-expr","locations":[{"start":{"line":62,"column":16},"end":{"line":62,"column":39}},{"start":{"line":62,"column":43},"end":{"line":62,"column":65}}],"line":62},"10":{"loc":{"start":{"line":65,"column":12},"end":{"line":81,"column":13}},"type":"if","locations":[{"start":{"line":65,"column":12},"end":{"line":81,"column":13}},{"start":{"line":65,"column":12},"end":{"line":81,"column":13}}],"line":65},"11":{"loc":{"start":{"line":67,"column":16},"end":{"line":80,"column":17}},"type":"if","locations":[{"start":{"line":67,"column":16},"end":{"line":80,"column":17}},{"start":{"line":67,"column":16},"end":{"line":80,"column":17}}],"line":67},"12":{"loc":{"start":{"line":71,"column":28},"end":{"line":73,"column":29}},"type":"if","locations":[{"start":{"line":71,"column":28},"end":{"line":73,"column":29}},{"start":{"line":71,"column":28},"end":{"line":73,"column":29}}],"line":71},"13":{"loc":{"start":{"line":84,"column":8},"end":{"line":86,"column":9}},"type":"if","locations":[{"start":{"line":84,"column":8},"end":{"line":86,"column":9}},{"start":{"line":84,"column":8},"end":{"line":86,"column":9}}],"line":84},"14":{"loc":{"start":{"line":95,"column":16},"end":{"line":98,"column":17}},"type":"if","locations":[{"start":{"line":95,"column":16},"end":{"line":98,"column":17}},{"start":{"line":95,"column":16},"end":{"line":98,"column":17}}],"line":95},"15":{"loc":{"start":{"line":100,"column":12},"end":{"line":102,"column":13}},"type":"if","locations":[{"start":{"line":100,"column":12},"end":{"line":102,"column":13}},{"start":{"line":100,"column":12},"end":{"line":102,"column":13}}],"line":100},"16":{"loc":{"start":{"line":107,"column":8},"end":{"line":109,"column":9}},"type":"if","locations":[{"start":{"line":107,"column":8},"end":{"line":109,"column":9}},{"start":{"line":107,"column":8},"end":{"line":109,"column":9}}],"line":107},"17":{"loc":{"start":{"line":111,"column":8},"end":{"line":117,"column":9}},"type":"if","locations":[{"start":{"line":111,"column":8},"end":{"line":117,"column":9}},{"start":{"line":111,"column":8},"end":{"line":117,"column":9}}],"line":111},"18":{"loc":{"start":{"line":120,"column":17},"end":{"line":120,"column":60}},"type":"binary-expr","locations":[{"start":{"line":120,"column":17},"end":{"line":120,"column":20}},{"start":{"line":120,"column":24},"end":{"line":120,"column":40}},{"start":{"line":120,"column":44},"end":{"line":120,"column":60}}],"line":120}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":38,"6":38,"7":38,"8":3,"9":35,"10":5,"11":1,"12":34,"13":34,"14":26,"15":5,"16":8,"17":21,"18":1,"19":20,"20":20,"21":77300,"22":20,"23":20,"24":20,"25":24,"26":34,"27":34,"28":34,"29":34,"30":3,"31":31,"32":1,"33":30,"34":30,"35":30,"36":30,"37":77331,"38":77331,"39":1,"40":77330,"41":77329,"42":77329,"43":77316,"44":77316,"45":77316,"46":77313,"47":77311,"48":3,"49":77316,"50":29,"51":27,"52":1,"53":26,"54":26,"55":26,"56":26,"57":57,"58":57,"59":26,"60":233,"61":21,"62":21,"63":57,"64":21,"65":26,"66":8,"67":3,"68":5,"69":5,"70":5,"71":1,"72":4,"73":4,"74":46,"75":3,"76":6,"77":1},"f":{"0":1,"1":38,"2":38,"3":5,"4":24,"5":34,"6":77316,"7":26,"8":233,"9":8,"10":5,"11":46,"12":3,"13":6},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[3,35],"4":[1,34],"5":[5,21],"6":[1,20],"7":[1,30],"8":[1,77330],"9":[77331,1],"10":[77329,1],"11":[77316,13],"12":[77311,2],"13":[1,26],"14":[21,5],"15":[21,36],"16":[3,5],"17":[1,4],"18":[46,44,42]},"inputSourceMap":{"version":3,"file":"C:/Users/vande/source/repos/University/CPSC 310/project_team131/src/controller/InsightFacade.ts","sources":["C:/Users/vande/source/repos/University/CPSC 310/project_team131/src/controller/InsightFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n\tIInsightFacade,\r\n\tInsightDataset,\r\n\tInsightDatasetKind,\r\n\tInsightError,\r\n\tInsightResult,\r\n\tNotFoundError,\r\n} from \"./IInsightFacade\";\r\nimport JSZip from \"jszip\";\r\n// import {Query} from \"../interfaces/queryTypes\";\r\nimport {ExtractedContent} from \"../interfaces/datasetType\";\r\n\r\n/**\r\n * This is the main programmatic entry point for the project.\r\n * Method documentation is in IInsightFacade\r\n *\r\n */\r\nexport default class InsightFacade implements IInsightFacade {\r\n\tconstructor() {\r\n\t\tconsole.log(\"InsightFacadeImpl::init()\");\r\n\t}\r\n\tprivate datasets: InsightDataset[] = [];\r\n\t// private datasets: Map<string, unknown> = new Map();\r\n\tpublic async addDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]> {\r\n\t\tif (!this.isValidId(id)) {\r\n\t\t\treturn Promise.reject(new InsightError(\"Invalid id\"));\r\n\t\t}\r\n\r\n\t\tif (this.datasets.find((dataset) => dataset.id === id)) {\r\n\t\t\treturn Promise.reject(new InsightError(\"Dataset ID already exists\"));\r\n\t\t}\r\n\r\n\r\n\t\tlet extractedContent;\r\n\t\ttry {\r\n\t\t\textractedContent = await this.extractFromZip(content);\r\n\r\n\t\t\tif (!this.checkTheExtracted(extractedContent)) {\r\n\t\t\t\treturn Promise.reject(new InsightError(\"The dataset is not valid zip file\"));\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\treturn Promise.reject(new InsightError(\"Failed to extract content from ZIP\"));\r\n\t\t}\r\n\r\n\t\tif (kind !== InsightDatasetKind.Sections) {\r\n\t\t\treturn Promise.reject(new InsightError(\"Is not of kind Sections\"));\r\n\t\t}\r\n\t\tlet numRows = 0;\r\n\r\n\t\tfor (let coursePath in extractedContent) {\r\n\t\t\tnumRows += extractedContent[coursePath].result.length;\r\n\t\t}\r\n\t\tconst newDataset: InsightDataset = {\r\n\t\t\tid: id,\r\n\t\t\tkind: kind,\r\n\t\t\tnumRows: numRows,\r\n\t\t};\r\n\t\tthis.datasets.push(newDataset);\r\n\r\n\t\treturn Promise.resolve(this.datasets.map((dataset) => dataset.id));\r\n\t}\r\n\r\n\tprivate async extractFromZip(content: string): Promise<ExtractedContent> {\r\n\t\tconst zip = new JSZip();\r\n\t\tconst structuredContent: ExtractedContent = {};\r\n\r\n\t\ttry {\r\n\t\t\tawait zip.loadAsync(content, {base64: true});\r\n\t\t} catch (e) {\r\n\t\t\treturn Promise.reject(new InsightError(\"Failed to load ZIP\"));\r\n\t\t}\r\n\t\tif (!Object.keys(zip.files).length) {\r\n\t\t\treturn Promise.reject(new InsightError(\"The zip file is empty\"));\r\n\t\t}\r\n\t\tlet foundCourses = false;\r\n\t\tconst files = zip.files;\r\n\t\tconst loadingPromises = [];\r\n\r\n\t\tfor (const fileName in files) {\r\n\t\t\tconst file = files[fileName];\r\n\r\n\t\t\tif (!fileName.includes(\"/\") && fileName !== \"courses\") {\r\n\t\t\t\treturn Promise.reject(new InsightError(`Unexpected file/folder at the root of the ZIP: ${fileName}`));\r\n\t\t\t}\r\n\r\n\t\t\tif (fileName.startsWith(\"courses\")) {\r\n\t\t\t\tfoundCourses = true;\r\n\t\t\t\tif (!file.dir) {\r\n\t\t\t\t\tconst promise = file.async(\"text\").then((section) => {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tconst parsedContent = JSON.parse(section);\r\n\t\t\t\t\t\t\tif (parsedContent.result) {\r\n\t\t\t\t\t\t\t\tstructuredContent[fileName] = parsedContent;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\t\tthrow new InsightError(`Failed to parse content for file: ${fileName}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tloadingPromises.push(promise);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tawait Promise.all(loadingPromises);\r\n\r\n\t\tif (!foundCourses) {\r\n\t\t\treturn Promise.reject(new InsightError(\"The ZIP does not contain a 'courses' file or folder at its root.\"));\r\n\t\t}\r\n\r\n\t\treturn structuredContent;\r\n\t}\r\n\tprivate checkTheExtracted(extractedContent: ExtractedContent): boolean {\r\n\t\tconst requiredKeys = [\"id\", \"Course\", \"Title\", \"Professor\", \"Subject\", \"Year\", \"Avg\", \"Pass\", \"Fail\", \"Audit\"];\r\n\r\n\t\tlet hasValidSection = false;\r\n\t\tfor (const coursePath in extractedContent) {\r\n\t\t\tconst courseData = extractedContent[coursePath];\r\n\t\t\tfor (const section of courseData.result) {\r\n\t\t\t\tif (requiredKeys.every((key) => Object.prototype.hasOwnProperty.call(section, key))) {\r\n\t\t\t\t\thasValidSection = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (hasValidSection) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn hasValidSection;\r\n\t}\r\n\r\n\tpublic removeDataset(id: string): Promise<string> {\r\n\t\tif (!this.isValidId(id)) {\r\n\t\t\treturn Promise.reject(new InsightError(\"Invalid id\"));\r\n\t\t}\r\n\t\tconst datasetIndex = this.datasets.findIndex((dataset) => dataset.id === id);\r\n\r\n\t\tif (datasetIndex === -1) {\r\n\t\t\treturn Promise.reject(new NotFoundError(\"Dataset ID has not been added\"));\r\n\t\t} else {\r\n\t\t\tthis.datasets.splice(datasetIndex, 1);\r\n\t\t\treturn Promise.resolve(id);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic isValidId(id: string): boolean {\r\n\t\treturn !(!id || /^\\s*$/.test(id) || id.includes(\"_\"));\r\n\t}\r\n\tpublic performQuery(query: unknown): Promise<InsightResult[]> {\r\n\t\treturn Promise.reject(\"Not implemented.\");\r\n\t}\r\n\r\n\tpublic listDatasets(): Promise<InsightDataset[]> {\r\n\t\treturn Promise.resolve(this.datasets);\r\n\t}\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c892e7d566b6acfda7f3926d657cf9e78f188057","contentHash":"deb323ef77d2f3c906bc646b6e4b390b72e5adb757d42ed3f9914c52ed5fa78b"}}